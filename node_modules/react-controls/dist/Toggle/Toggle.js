'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autoBind = require('../utils/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _noop = require('../utils/noop');

var _noop2 = _interopRequireDefault(_noop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function radioElement(p) {
  var iconClass = (0, _classnames2.default)('fa', {
    'fa-circle-o': !p.value,
    'fa-dot-circle-o': p.value
  });
  return _react2.default.createElement('i', { className: iconClass });
}

function checkBoxElement(p) {
  var iconClass = (0, _classnames2.default)('fa', {
    'fa-square-o': !p.value,
    'fa-check-square': p.value
  });
  return _react2.default.createElement('i', { className: iconClass });
}

function switchElement(prop) {
  var labelClass = (0, _classnames2.default)('toggle-icon-label', {
    'toggle-il-left': prop.value,
    'toggle-il-right': !prop.value
  });

  var iconLabelText = void 0;

  if (prop.iconLabel && prop.iconLabel.length) {
    iconLabelText = prop.value ? prop.iconLabel[0] : prop.iconLabel[1];
  }
  return _react2.default.createElement(
    'div',
    { className: 'toggle-wrapper' },
    _react2.default.createElement(
      'div',
      { className: labelClass },
      iconLabelText
    ),
    _react2.default.createElement('div', { className: 'toggle-btn' })
  );
}

var Toggle = function (_React$Component) {
  _inherits(Toggle, _React$Component);

  function Toggle(props) {
    _classCallCheck(this, Toggle);

    var _this = _possibleConstructorReturn(this, (Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call(this, props));

    (0, _autoBind2.default)(['handleClick'], _this);
    return _this;
  }

  _createClass(Toggle, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return (0, _reactAddonsShallowCompare2.default)(this, nextProps);
    }
  }, {
    key: 'getIconElement',
    value: function getIconElement() {
      var _props = this.props,
          iconElement = _props.iconElement,
          type = _props.type;

      if (typeof iconElement === 'function') return iconElement(this.props);
      if (type === 'radio') return radioElement(this.props);else if (type === 'checkbox') return checkBoxElement(this.props);else return switchElement(this.props);
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      this.props.onChange({
        name: this.props.name,
        value: !this.props.value
      });
    }
  }, {
    key: 'isNormal',
    value: function isNormal() {
      return this.props.mode === 'normal';
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          attributes = _props2.attributes,
          className = _props2.className,
          name = _props2.name,
          label = _props2.label,
          value = _props2.value,
          disabled = _props2.disabled,
          countElem = _props2.countElem,
          count = _props2.count,
          type = _props2.type;


      var mainClass = (0, _classnames2.default)('rf-toggle', type, className, name, {
        'toggle-disabled': disabled,
        'toggle-active': value,
        'toggle-tag': !this.isNormal()
      });

      return _react2.default.createElement(
        'div',
        _extends({}, attributes, {
          className: mainClass,
          onClick: !disabled && this.handleClick
        }),
        label && _react2.default.createElement(
          'div',
          { className: 'toggle-label' },
          label,
          count !== undefined && countElem(this.props)
        ),
        this.isNormal() && this.getIconElement()
      );
    }
  }]);

  return Toggle;
}(_react2.default.Component);

exports.default = Toggle;


Toggle.propTypes = {
  attributes: _react.PropTypes.object,
  className: _react.PropTypes.string,
  count: _react.PropTypes.number,
  countElem: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.element]),
  disabled: _react.PropTypes.bool,
  iconElement: _react.PropTypes.func,
  iconLabel: _react.PropTypes.array,
  label: _react.PropTypes.string,
  labelPosition: _react.PropTypes.oneOf(['before', 'after']),
  mode: _react.PropTypes.oneOf(['normal', 'tag']),
  name: _react.PropTypes.string.isRequired,
  onChange: _react.PropTypes.func,
  type: _react.PropTypes.oneOf(['switch', 'radio', 'checkbox']),
  value: _react.PropTypes.bool.isRequired
};

Toggle.defaultProps = {
  countElem: function countElem(p) {
    return _react2.default.createElement(
      'span',
      { className: 'toggle-count' },
      '(',
      p.count,
      ')'
    );
  },

  disabled: false,
  mode: 'normal',
  onChange: _noop2.default,
  type: 'switch',
  value: false
};