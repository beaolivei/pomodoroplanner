'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autoBind = require('../utils/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _lastElement = require('../utils/lastElement');

var _lastElement2 = _interopRequireDefault(_lastElement);

var _getSelectedIds = require('../utils/getSelectedIds');

var _getSelectedIds2 = _interopRequireDefault(_getSelectedIds);

var _deepCopy = require('deep-copy');

var _deepCopy2 = _interopRequireDefault(_deepCopy);

var _Toggle = require('../Toggle/Toggle');

var _Toggle2 = _interopRequireDefault(_Toggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function handleSingleSelect(arr, index) {
  return arr.map(function (val, i) {
    var obj = val;
    obj.value = i === index ? !val.value : false;
    return obj;
  });
}

function formatValue(props) {
  var value = props.value,
      selectedIds = props.selectedIds,
      id = props.id;

  if (!selectedIds) return value;
  var value$ = (0, _deepCopy2.default)(value);
  return value$.map(function (val) {
    if ((typeof selectedIds === 'undefined' ? 'undefined' : _typeof(selectedIds)) === 'object' && selectedIds.indexOf(val[id]) >= 0 || typeof selectedIds === 'number' && selectedIds === val[id]) val.value = true;
    return val;
  });
}

var Group = function (_Component) {
  _inherits(Group, _Component);

  function Group(props) {
    _classCallCheck(this, Group);

    var _this = _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).call(this, props));

    _this.formattedValue = formatValue(props);

    (0, _autoBind2.default)(['handleChange'], _this);
    return _this;
  }

  _createClass(Group, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.formattedValue = formatValue(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.formattedValue = formatValue(newProps);
    }
  }, {
    key: 'getElements',
    value: function getElements() {
      var _this2 = this;

      var _props = this.props,
          type = _props.type,
          mode = _props.mode,
          disabled = _props.disabled;

      return this.formattedValue.map(function (val, i) {
        return _react2.default.createElement(_Toggle2.default, _extends({}, val, {
          key: i,
          mode: mode,
          name: type + '-' + i,
          onChange: _this2.handleChange,
          type: type,
          value: val.value,
          disabled: disabled
        }));
      });
    }
  }, {
    key: 'handleChange',
    value: function handleChange(data) {
      var _props2 = this.props,
          name = _props2.name,
          type = _props2.type,
          id = _props2.id,
          value = _props2.value;

      var newValue = (0, _deepCopy2.default)(this.formattedValue);

      var index = parseInt((0, _lastElement2.default)(data.name.split('-')), 10);

      if (type === 'checkbox' || type === 'switch') {
        newValue[index].value = data.value;
      } else {
        newValue = handleSingleSelect(newValue, index);
      }

      this.props.onChange({
        index: index,
        name: name,
        oldValue: value,
        value: newValue,
        selectedIds: (0, _getSelectedIds2.default)(newValue, id, type === 'radio')
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          name = _props3.name,
          className = _props3.className,
          attributes = _props3.attributes,
          type = _props3.type;

      var mainClass = (0, _classnames2.default)('rf-group', type + '-group', name, className);
      return _react2.default.createElement(
        'div',
        _extends({}, attributes, { className: mainClass }),
        this.getElements()
      );
    }
  }]);

  return Group;
}(_react.Component);

exports.default = Group;


Group.propTypes = {
  attributes: _react.PropTypes.object,
  className: _react.PropTypes.string,
  mode: _react.PropTypes.oneOf(['normal', 'tag']),
  name: _react.PropTypes.string.isRequired,
  onChange: _react.PropTypes.func.isRequired,
  type: _react.PropTypes.oneOf(['radio', 'checkbox', 'switch']),
  value: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    id: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
    count: _react.PropTypes.number,
    label: _react.PropTypes.string,
    value: _react.PropTypes.bool
  })),
  selectedIds: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.number]),
  id: _react.PropTypes.string,
  disabled: _react.PropTypes.bool
};

Group.defaultProps = {
  id: 'id',
  disabled: false
};